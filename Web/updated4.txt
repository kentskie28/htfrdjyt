chat.py
import random
import json
import torch
from model import NeuralNet
from nltk_util import bag_of_words, tokenize

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Load model data
FILE = "data.pth"
data = torch.load(FILE)
input_size = data["input_size"]
hidden_size = data["hidden_size"]
output_size = data["output_size"]
all_words = data['all_words']
tags = data['tags']
model_state = data["model_state"]

# Initialize model
model = NeuralNet(input_size, hidden_size, output_size).to(device)
model.load_state_dict(model_state)
model.eval()

bot_name = "Nisu"

# Global context dictionary to store user-specific context
context = {}

def load_intents(language):
    """ Load the correct intents file based on selected language """
    if language == "tagalog":
        file_path = 'intents_ph.json'
    else:
        file_path = 'intents.json'

    with open(file_path, 'r') as json_data:
        return json.load(json_data)

def get_user_context(user_id):
    """Get the current context of the user."""
    return context.get(user_id, None)

def set_user_context(user_id, new_context):
    """Set or reset the user's context."""
    context[user_id] = new_context

def get_response(msg, user_id="default_user", language='english'):
    intents = load_intents(language)
    sentence = tokenize(msg)
    X = bag_of_words(sentence, all_words)
    X = X.reshape(1, X.shape[0])
    X = torch.from_numpy(X).to(device)

    output = model(X)
    _, predicted = torch.max(output, dim=1)
    tag = tags[predicted.item()]
    
    probs = torch.softmax(output, dim=1)
    prob = probs[0][predicted.item()]

    confidence_threshold = 0.75

    if prob.item() > confidence_threshold:
        current_context = get_user_context(user_id)
        for intent in intents['intents']:
            if tag == intent["tag"]:
                # If the tag matches, send suggestions
                suggestions = intent.get("suggestions", [])
                
                # Location intents handling
                if tag == "location":
                    if current_context == "awaiting_location_confirmation":
                        set_user_context(user_id, None)
                        return {"response": f"Showing map for {msg}", "destination": msg, "secondary_response": None, "suggestions": []}
                    else:
                        possible_destinations = ["NISU Main", "NISU West", "Registrar", "Cashier", "OSAS", "CICS Department", "COENG Department"]
                        for destination in possible_destinations:
                            if destination.lower() in msg.lower():
                                set_user_context(user_id, "awaiting_location_confirmation")
                                return {"response": f"Can I access your location to show you the map for {destination}?", "destination": destination, "secondary_response": None, "suggestions": []}
                        return {"response": "Could not find your destination", "destination": None, "secondary_response": None, "suggestions": []}
                
                set_user_context(user_id, None)
                primary_response = random.choice(intent['responses'])
                secondary_response = random.choice(intent.get('secondary_responses', []))
                return {"response": primary_response, "destination": None, "secondary_response": secondary_response, "suggestions": suggestions}

    return {"response": "I don't understand.", "destination": None, "secondary_response": None, "suggestions": []}
app.js
class Chatbox {
    constructor() {
        this.args = {
            openButton: document.querySelector('.chatbox__button'),
            chatBox: document.querySelector('.chatbox__support'),
            sendButton: document.querySelector('.send__button'),
        };

        this.state = false;
        this.messages = [];
        this.isSending = false; // Prevents multiple sends
    }

    display() {
        const { openButton, chatBox, sendButton } = this.args;
        const exitButton = chatBox.querySelector('.chatbox__exit');
    
        // Log chatBox to ensure it is the correct element
        console.log('chatBox reference:', chatBox);
    
        openButton.addEventListener('click', () => {
            this.toggleState(chatBox);
            openButton.style.display = 'none';  // Hide the openButton when clicked
        });
    
        exitButton.addEventListener('click', () => {
            this.toggleState(chatBox);
            openButton.style.display = 'block';  // Show the openButton when chatbox is closed
        });
    
        sendButton.addEventListener('click', () => this.onSendButton(chatBox));
    
        const node = chatBox.querySelector('input');
        node.addEventListener("keyup", ({ key }) => {
            if (key === "Enter") {
                this.onSendButton(chatBox);
            }
        });
    }
    
    toggleState(chatbox) {
        this.state = !this.state;
        if (this.state) {
            chatbox.classList.add('chatbox--active');
        } else {
            chatbox.classList.remove('chatbox--active');
        }
    }

    onSendButton(chatbox) {
        if (this.isSending) return;

        this.isSending = true;
        var textField = chatbox.querySelector('input');
        let text1 = textField.value;
        let language = document.getElementById("language-select").value;

        if (text1 === "") {
            this.isSending = false;
            return;
        }

        let msg1 = { name: "User", message: text1 };
        this.messages.push(msg1);
        this.updateChatText(chatbox);

        textField.value = '';
        this.sendMessageToBot(text1, language, chatbox);
    }

    sendMessageToBot(text, language, chatbox) {
        fetch('http://127.0.0.1:5000/predict', {
            method: 'POST',
            body: JSON.stringify({ message: text, language: language }),
            mode: 'cors',
            headers: {
                'Content-Type': 'application/json',
            },
        })
        .then((r) => r.json())
        .then((r) => {
            const { answer, secondary_response, suggestion } = r;
            console.log("Response from server:", r); // Log the full response for debugging
            let botResponse = r.answer;
            let secondaryResponse = r.secondary_response; // Get the secondary response
            let destination = r.destination;

            // Show bot's main response
            setTimeout(() => {
                this.messages.push({ name: "NISUBOT", message: answer });
                this.isSending = false;
                this.suggestions = suggestion; // Store suggestions here
                this.updateChatText(chatbox);
            }, 0);
    
            // Show secondary response if it exists
            if (secondary_response) {
                setTimeout(() => {
                    this.messages.push({ name: "NISUBOT", message: secondary_response });
                    this.updateChatText(chatbox);
                }, 2000);
            }
    
            // If suggestions exist, render them
            if (suggestion && suggestion.length > 0) {
                this.generateSuggestionButtons(chatbox, suggestion);
            }

            if (botResponse.includes("It seems that you are asking for location, please click the map button to redirect you to your destination")) {
                this.requestGeolocation(chatbox, destination);
            }
        })
        .catch((error) => {
            console.error('Error:', error);
            this.isSending = false;
        });
    }
    requestGeolocation(chatbox, destination) {
        if (navigator.geolocation) {
            navigator.geolocation.watchPosition((position) => {
                const { latitude, longitude } = position.coords;

                const mapId = `map-${Date.now()}`;
                const mapMsg = `<div id="${mapId}" class="map-container"></div>`;
                this.messages.push({ name: "NISUBOT", message: mapMsg, isMap: true });
                this.updateChatText(chatbox);

                this.showMap(latitude, longitude, destination, mapId);
            }, () => {
                alert('Geolocation permission denied.');
            });
        } else {
            alert('Geolocation is not supported by your browser.');
        }
    }    

    showMap(lat, lon, destination, mapId) {
        const mapDiv = document.getElementById(mapId);
        mapDiv.style.display = 'block'; 
        
        const map = L.map(mapId).setView([lat, lon], 13); 
    
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);
    
        // User's current location
        L.marker([lat, lon]).addTo(map)
            .bindPopup('You are here!')
            .openPopup();
    
        fetch('/static/destinations.json')
            .then(response => response.json())
            .then(data => {
                const normalizedDestination = destination?.toLowerCase().trim();
                const destinationData = data.destinations.find(dest => dest.name.toLowerCase().trim() === normalizedDestination);
    
                if (destinationData) {
                    const destinationLat = destinationData.destinationlat;
                    const destinationLon = destinationData.destinationlon;
                    const accuracy = destinationData.accuracy || 10; 
    
                    L.marker([destinationLat, destinationLon]).addTo(map)
                        .bindPopup(`Destination: ${destinationData.name}`)
                        .openPopup();
                    L.circle([destinationLat, destinationLon], { radius: accuracy })
                        .addTo(map)

                    const bounds = L.latLngBounds(
                        [lat, lon], 
                        [destinationLat, destinationLon]
                    );
                    map.fitBounds(bounds, { padding: [50, 50] });
                } else {
                    alert("Destination not found.");
                }
            })
            .catch(error => {
                console.error("Error fetching destinations:", error);
            });
        
        setTimeout(() => {
            document.querySelectorAll('svg').forEach(svg => {
                if (svg.hasAttribute('viewBox')) {
                    const viewBoxValue = svg.getAttribute('viewBox');
                    if (viewBoxValue && viewBoxValue.includes('%')) {
                        svg.setAttribute('viewBox', '0 0 100 100'); 
                    }
                }
            });
        }, 1000);
    }
    
    generateSuggestionButtons(chatbox, suggestions) {
        const chatmessage = chatbox.querySelector('.chatbox__messages');
    
        // Create a container for suggestion buttons
        const suggestionContainer = document.createElement('div');
        suggestionContainer.className = 'suggested-replies'; // Assign a class for styling
    
        // Add buttons for each suggestion
        suggestions.forEach((suggestion) => {
            const button = document.createElement('button');
            button.className = 'suggestion-button';
            button.textContent = suggestion;
    
            // Handle button click
            button.addEventListener('click', () => {
                this.onSendSuggestion(chatbox, suggestion);
            });
    
            suggestionContainer.appendChild(button);
        });
    
        // Prepend the suggestion container to make it appear at the top
        chatmessage.prepend(suggestionContainer);
    
        // Scroll to the bottom to ensure buttons are visible
        chatmessage.scrollTop = chatmessage.scrollHeight;
    }
        
    onSendSuggestion(chatbox, suggestion) {
        console.log(`Suggestion clicked: ${suggestion}`);
        fetch('http://127.0.0.1:5000/get_pattern', {  // Ensure the port is correct
            method: 'POST',
            body: JSON.stringify({ tag: suggestion }),
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            console.log(`Pattern received for ${suggestion}:`, data.pattern);
            const pattern = data.pattern; // Get the pattern for the suggestion
            if (pattern) {
                const textField = chatbox.querySelector('input');
                textField.value = pattern; // Autofill the input field with the pattern
                this.onSendButton(chatbox); // Trigger the send button logic
            } else {
                console.error('Pattern not found for suggestion:', suggestion);
            }
        })
        .catch(error => console.error('Error fetching pattern:', error));
    }
    updateChatText(chatbox) {
        let html = '';
        this.messages.slice().reverse().forEach((item) => {
            if (item.isMap) {
                html += item.message; 
            }if (item.name === "NISUBOT") {
                html += `<div class="messages__item messages__item--visitor">${item.message}</div>`;
            } else {
                html += `<div class="messages__item messages__item--operator">${item.message}</div>`;
            }
        });
    
        const chatmessage = chatbox.querySelector('.chatbox__messages');
    
        if (chatmessage) {
            // Update chat messages
            chatmessage.innerHTML = html;
    
            // Scroll to the bottom of chat messages
            chatmessage.scrollTop = chatmessage.scrollHeight;
        }
    
        // Render suggestion buttons AFTER messages are updated
        if (this.suggestions && this.suggestions.length > 0) {
            this.generateSuggestionButtons(chatbox, this.suggestions);
        }
    }
}      
document.addEventListener("DOMContentLoaded", () => {
    const chatbox = new Chatbox();
    chatbox.display();
});


app.py
import json
import random
from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
from chat import get_response
app = Flask(__name__)
CORS(app)

# Load destinations data for location-based queries
with open('static/destinations.json', 'r') as f:
    destinations_data = json.load(f)

@app.get("/")
def index_get():
    return render_template("base.html")

@app.post("/predict")
def predict():
    data = request.get_json()
    text = data.get("message")
    language = data.get("language", "english")

    response_data = get_response(text, language)

    # Include suggestions in the response
    message = {
        "answer": response_data["response"],
        "secondary_response": response_data.get("secondary_response"),
        "destination": response_data.get("destination"),
        "suggestion": response_data.get("suggestions", []) 
    }
    return jsonify(message)

@app.route('/get_pattern', methods=['POST'])
def get_pattern():
    tag = request.json.get("tag")
    print(f"Received request for tag: {tag}")  # Debug log
    
    # Load intents from the JSON file
    with open('intents.json', 'r') as f:
        intents = json.load(f)
    
    # Find the intent matching the provided tag
    for intent in intents['intents']:
        if intent['tag'].lower() == tag.lower():
            print(f"Found patterns for tag {tag}: {intent['patterns']}")  # Debug log
            pattern = random.choice(intent['patterns'])  # Choose a random pattern
            return jsonify({"pattern": pattern})
    
    print(f"No patterns found for tag: {tag}")  # Debug log
    return jsonify({"pattern": None})  # Return None if no matching tag is found


@app.post("/get_destination")
def get_destination():
    data = request.get_json()
    destination_name = data.get("destination").lower()
    matching_destinations = [
        d for d in destinations_data['destinations']
        if destination_name in d['name'].lower()
    ]

    if matching_destinations:
        return jsonify({
            'lat': matching_destinations['destinationlat'],
            'lon': matching_destinations['destinationlon'],
            'name': matching_destinations['name']
        })
    else:
        print(f"waay destination")
    
    return jsonify({'lat': None, 'lon': None})
if __name__ == "__main__":
    app.run(debug=True,  host='0.0.0.0', port=5000)